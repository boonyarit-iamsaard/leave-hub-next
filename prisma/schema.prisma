// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  ADMIN
  USER
}

enum Roster {
  ENGINEER
  MECHANIC
}

enum ShiftType {
  OFF
  LEAVE
  HOLIDAY
}

enum ShiftStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ShiftPriority {
  NORMAL
  ANL1
  ANL2
  ANL3
}

model User {
  id             String           @id @default(cuid())
  name           String
  username       String           @unique
  password       String
  email          String           @unique
  ern            String           @unique
  role           Role             @default(USER)
  roster         Roster           @default(MECHANIC)
  entitlements   Entitlement[]
  shifts         Shift[]
  rosterSequence RosterSequence[]
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")

  @@map("users")
}

model Entitlement {
  id        String   @id @default(cuid())
  name      String
  year      Int
  amount    Float
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@map("entitlements")
}

model Shift {
  id        String        @id @default(cuid())
  type      ShiftType     @default(LEAVE)
  status    ShiftStatus   @default(PENDING)
  priority  ShiftPriority @default(NORMAL)
  start     DateTime      @db.Date()
  end       DateTime      @db.Date()
  amount    Int
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  @@index([userId])
  @@map("shifts")
}

model PublicHoliday {
  id        String   @id @default(cuid())
  name      String
  date      DateTime @unique @db.Date()
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("public_holidays")
}

model RosterSequence {
  id        String   @id @default(cuid())
  year      Int
  sequence  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([userId])
  @@map("roster_sequences")
}
